apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

ext {
    bintrayRepo = "UnityAds"
    bintrayName = "unityads"

    publishedGroupId = 'com.unity3d.ads'
    libraryName = 'unity-ads'
    artifact = 'unity-ads'
    archivesBaseName = 'unity-ads'

    libraryDescription = 'Monetize your entire player base and reach new audiences with video ads.'

    siteUrl = 'https://github.com/Unity-Technologies/unity-ads-android'
    gitUrl = 'https://github.com/Unity-Technologies/unity-ads-android.git'

    libraryVersion = '3.4.8'

    developerId = 'sbankhead'
    developerName = 'Steven Bankhead'
    developerEmail = 'sbankhead@unity3d.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

version = libraryVersion

android {
  compileSdkVersion 26
  buildToolsVersion '28.0.2'
  com.android.ddmlib.DdmPreferences.setLogLevel("verbose")
  com.android.ddmlib.DdmPreferences.setTimeOut(10 * 60000)

  defaultPublishConfig "release"

  defaultConfig {
    minSdkVersion 9
    targetSdkVersion 26
    /*
    Please ensure that the last two digits of version number does not exceed 50 unless
    it is a China SDK. This is because adding 50 to the version number is a one-to-one
    mapping between normal SDK and China SDK.

    Example : version number 2350 corresponds to China version of 2300.

    All SDK with version numbers with last two digits >= 50 will be treated
    as China SDK for filtering in the backend.
    */
    versionCode = 3480
    versionName = "3.4.8"

    setProperty("archivesBaseName", "unity-ads")

    buildConfigField 'String', 'WEBVIEW_BRANCH', getPropertyStringWithDefaultValue('WEBVIEW_BRANCH', '"' + versionName + '"')

    testBuildType "debug"

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    testInstrumentationRunnerArguments disableAnalytics: 'true' // Won't work yet, see: https://code.google.com/p/android/issues/detail?id=188241
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt')
      consumerProguardFiles 'proguard-rules.pro'
    }
    debug {
      minifyEnabled false
      testCoverageEnabled false
      consumerProguardFiles 'proguard-rules.pro'
    }
    coverage {
      testCoverageEnabled true
      consumerProguardFiles 'proguard-rules.pro'
      signingConfig signingConfigs.debug
      buildConfigField 'String', 'WEBVIEW_BRANCH', getPropertyStringWithDefaultValue('WEBVIEW_BRANCH', '"development"')
    }
  }

  libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFile != null && outputFileName.endsWith('.aar')) {
                outputFileName = "${archivesBaseName}-${variant.buildType.name}.aar"
            }
        }
    }
}

dependencies {
  testImplementation 'junit:junit:4.12'
  androidTestImplementation 'org.mockito:mockito-core:2.19.1'
  androidTestImplementation 'org.mockito:mockito-android:2.19.1'
  androidTestImplementation 'com.android.support.test:runner:1.0.2'
  androidTestImplementation 'com.android.support.test:rules:1.0.2'
  compileOnly 'com.google.ar:core:1.0.0'
}

android.testVariants.all { variant ->
  variant.outputs.all { output ->
    outputFileName = "../../androidTest.apk"
  }
}

task javadoc(type: Javadoc, overwrite: true) {
        description "Generates Javadoc for Release"
        source = android.sourceSets.main.java.srcDirs
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        doFirst {
          classpath = project.files(android.getBootClasspath().join(File.pathSeparator)) + files(ext.androidJar)
        }
    options {
           links "http://docs.oracle.com/javase/7/docs/api/"
           linksOffline "http://developer.android.com/reference","${android.sdkDirectory}/docs/reference"
        }
        exclude '**/R.java'
        exclude 'com/unity3d/services/ar/view/GLSurfaceView.java'
        exclude 'com/unity3d/services/ar/api/AR.java'
        exclude 'com/unity3d/services/ar/view/ARView.java'
        exclude 'com/unity3d/services/ar/view/ARViewHandler.java'
        destinationDir = file("../javadoc/")
    }

task androidJavadocsJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    baseName = "${archivesBaseName}"
    from javadoc.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = "sources"
    baseName = "${archivesBaseName}"
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidJavadocsJar
    archives androidSourcesJar
}

task localProperties { 
  if (!file("$rootDir/local.properties").exists()) {
    file("$rootDir/local.properties").withWriterAppend { w -> "" }
  }
}

// Bintray
bintray {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = false
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}

def getPropertyStringWithDefaultValue(String key, String defaultValue) {
  def value = project.getProperties().get(key)
  // Ensure that string is quoted
  if ((value != null) && (!(value ==~ /^".*"$/)) ){
    println "Value for key '$key' is not quoted, adding quotes to '$value'"
    value = "\"$value\""
  }
  return value != null ? value : defaultValue
}

if (project.rootProject.file('local.properties').exists()) {
    apply from: 'mavenPomBintrayUpload.gradle'
}